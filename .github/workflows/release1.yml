name: "tagged-release"

on:
  push:
    branches:
      - main

jobs:
  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Checkout Wiki"
        run: |
          git clone https://github.com/codal-htripathi/ShopifyCICD1File.wiki.git
          cd ShopifyCICD1File.wiki
          git checkout main || git checkout -b main
          cat version.textile

      - name: "Get the latest tag from Wiki"
        id: tag
        run: |
          latest_tag=$(grep -oE 'IND_RELEASE-v[0-9]+\.[0-9]+\.[0-9]+' ShopifyCICD1File.wiki/version.textile | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | tail -n 1 || echo "v0.0.0")
          echo "Latest tag from Wiki: $latest_tag"
          echo "::set-output name=latest_tag::$latest_tag"

      - name: "Get version type from commit message"
        id: get_version_type
        run: |
          version_type=$(git log -1 --pretty=%B | grep -oE 'patch|minor|major' || echo "patch")
          echo "::set-output name=version_type::$version_type"

      - name: "Calculate next version"
        id: next_version
        run: |
          latest_tag=${{ steps.tag.outputs.latest_tag }}
          version_type=${{ steps.get_version_type.outputs.version_type }}
          IFS='.' read -r -a parts <<< "${latest_tag/v/}"
          
          if [ "$version_type" = "patch" ]; then
            next_patch=$((parts[2]+1))
            next_version="v${parts[0]}.${parts[1]}.$next_patch"
          elif [ "$version_type" = "minor" ]; then
            next_minor=$((parts[1]+1))
            next_version="v${parts[0]}.$next_minor.0"
          elif [ "$version_type" = "major" ]; then
            next_major=$((parts[0]+1))
            next_version="v$next_major.0.0"
          fi

          echo "Next version: $next_version"
          echo "::set-output name=next_version::$next_version"

      - name: "Build & test"
        run: |
          echo "done!"

      - name: "Create new tag"
        run: |
          git tag ${{ steps.next_version.outputs.next_version }}
          git push origin ${{ steps.next_version.outputs.next_version }}

      - name: "Create GitHub Release"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ steps.next_version.outputs.next_version }}"
          prerelease: false
          draft: false
          title: "Release ${{ steps.next_version.outputs.next_version }}"
          files: |
            LICENSE.txt
            *.jar

      - name: "Update Wiki with New Version"
        run: |
          cd ShopifyCICD1File.wiki
          sed -i 's/IND_RELEASE-v[0-9]\+\.[0-9]\+\.[0-9]\+/IND_RELEASE-${{ steps.next_version.outputs.next_version }}/g' version.textile
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add version.textile
          git commit -m "Update version to ${{ steps.next_version.outputs.next_version }}"

          # Use the correct branch name
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/codal-htripathi/ShopifyCICD1File.wiki.git
          
          # Ensure we are on the main branch and push changes
          git checkout main || git checkout -b main
          git push origin main

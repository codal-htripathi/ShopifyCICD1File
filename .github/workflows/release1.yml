name: "tagged-release"

on:
  push:
    branches:
      - main

jobs:
  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"

    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Checkout Wiki"
        run: |
          git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.wiki.git
          cd $(basename "${GITHUB_REPOSITORY}").wiki
          git checkout main || git checkout -b main
          echo "Checked out the Wiki repository."
          cat version.textile

      - name: "Get the current version from Wiki"
        id: current_version
        run: |
          cd $(basename "${GITHUB_REPOSITORY}").wiki
          current_version=$(grep -oE 'IND_RELEASE-v[0-9]+\.[0-9]+\.[0-9]+' version.textile | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "Current version from Wiki: $current_version"
          echo "current_version=$current_version" >> $GITHUB_ENV

      - name: "Get version type from commit message"
        id: get_version_type
        run: |
          version_type=$(git log -1 --pretty=%B | grep -oE 'patch|minor|major' || echo "patch")
          echo "version_type=$version_type" >> $GITHUB_ENV

      - name: "Calculate next version"
        id: next_version
        run: |
          current_version=${{ env.current_version }}
          version_type=${{ env.version_type }}
          IFS='.' read -r -a parts <<< "${current_version/v/}"
          
          if [ "$version_type" = "patch" ]; then
            next_patch=$((parts[2]+1))
            next_version="v${parts[0]}.${parts[1]}.$next_patch"
          elif [ "$version_type" = "minor" ]; then
            next_minor=$((parts[1]+1))
            next_version="v${parts[0]}.$next_minor.0"
          elif [ "$version_type" = "major" ]; then
            next_major=$((parts[0]+1))
            next_version="v$next_major.0.0"
          fi

          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV

      - name: "Build & test"
        run: |
          echo "done!"

      - name: "Create new tag"
        run: |
          git tag ${{ env.next_version }}
          git push origin ${{ env.next_version }}

      - name: "Create GitHub Release"
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.next_version }}"
          prerelease: false
          draft: false
          title: "Release ${{ env.next_version }}"

      - name: "Update Wiki with New Version"
        run: |
          cd $(basename "${GITHUB_REPOSITORY}").wiki
          echo "Current version.textile contents before update:"
          cat version.textile

          # Update the version in the wiki file
          sed -i "s/IND_RELEASE-v[0-9]\+\.[0-9]\+\.[0-9]\+/IND_RELEASE-${{ env.next_version }}/g" version.textile

          echo "Updated version.textile contents after update:"
          cat version.textile

          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add version.textile
          git commit -m "Update version to ${{ env.next_version }}" || echo "No changes to commit"
          
          # Push changes to the wiki
          git push origin main

      - name: "Verify Wiki Update"
        run: |
          cd $(basename "${GITHUB_REPOSITORY}").wiki
          git log -1 --pretty=%B
          echo "Version file content after push:"
          cat version.textile
